集中式版本控制 如SVN 服务器一旦宕机，历史数据都会丢失（至多把当前客户机代码恢复到服务器），称作单点故障。

git 分布式版本控制 能避免单点故障

git发展简史--linux开源（开始手动合并）--2002BitKeepers商业公司授权liunx社区免费试用，但不能破解--2005Andrew师徒破解，被发现，收回免费试用权。linux自己用C开发git--两周开发主程序--一个月后git管理linux代码--2008gitHub上线，知名开源软件由github托管（jquery，ruby，PHP）

Git优势
大部分操作在本地完成，不用联网
完整性保证（对提交的数据进行hash运算）
尽可能添加数据而不是删除数据（很少有不可逆操作）
分支操作快捷流畅（快照--不同的指针--的方式管理）
与linux命令全面兼容

git结构
工作区 --写代码
暂存区--临时存储，打算存储到本地库
本地库--历史版本
工作区--git add--暂存区--git commit--本地库

git 与 guihub（外网git的代码托管中心，也可以使用码云）  局域网可以使用gitlab做代码托管
代码托管中心 的 作用就是维护远程库

本地库与远程库的交互
1团队内部协作
见原理图
2开团队协作
见原理图

git命令行操作
本地库操作
初始化，基本操作，分支管理
右键--git bash here--命令行
初始化 git init
生成 .git 存放本地库相关的子目录和文件，不能随意操作（隐藏的资源 ls -A）
设置签名  和远程库的登录账号密码没有任何关系
用户名:ZDSCoder
Email地址:存在或者不存在都行，区分不同开发人员身份
项目级别/仓库级别 的签名             只在当前本地库范围内有效
系统用户（登录系统的用户）级别  登录系统用户
二者都有，则项目级别生效 不能二者都没有
git config 不带参数则是项目级别
git config --global 系统级
git config --global user.name "名字"
git config --global user.email "邮箱"
项目级签名保存位置 .git/config(文件下的)/ user
系统级 cd ~ c/user/windows当前用户/.gitconfig（文件）一般都是设置系统用户级

----------------------------------------------12到30课时暂略-----------------------------------
git 与 github
github账号，最好不用163有时收不到
 修改头像--头像旁边三角--your profile

----------------------------------------------39课时----------------------------------------------






